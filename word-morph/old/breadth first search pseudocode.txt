shortestPath(startNode, endNode) {
   previous = {startNode: null}
   searchQueue = [startNode]
   found = false
   
   while (not found and not searchQueue.isEmpty()) {
      currentNode = searchQueue.dequeue()
      
      for (newNode in currentNode.getAdjacentNodes()) {
         if (not previous.containsKey(newNode)) {
            previous[newNode] = currentNode
            searchQueue.enqueue(newNode)

            if (newNode == endNode) {found = true}
         }
      }
   }
   
   if (found) {
      result = []
      currentNode = endNode
      
      while (currentNode != null) {
         result.prepend(currentNode)
         currentNode = previous[currentNode]
      }
   }
   else {
      result = null
   }
   
   return result
}


shortestPath(startNode, endNode)
   previous = {startNode: null}
   searchQueue = [startNode]
   found = false
   while not found and not searchQueue.isEmpty()
      currentNode = searchQueue.dequeue()
      for newNode in currentNode.getAdjacentNodes()
         if not previous.containsKey(newNode)
            previous[newNode] = currentNode
            searchQueue.enqueue(newNode)
            if newNode == endNode then found = true
   if found
      result = []
      currentNode = endNode
      while currentNode != null
         result.prepend(currentNode)
         currentNode = previous[currentNode]
   else
      result = null
   return result


shortestPath(startNode, endNode)
   previous = {startNode: null}
   searchQueue = [startNode]
   while true
      if searchQueue.isEmpty() then return null
      currentNode = searchQueue.dequeue()
      for newNode in currentNode.getAdjacentNodes()
         if not previous.containsKey(newNode)
            previous[newNode] = currentNode
            searchQueue.enqueue(newNode)
            if newNode == endNode
               result = []
               currentNode = endNode
               while true
                  result.prepend(currentNode)
                  currentNode = previous[currentNode]
                  if currentNode == null then return result